n = length(x)
n
est = median(x)
est
xs = sort(x)
xs
crit = -qnorm(alpha/2)
crit
cut = round((n/2) - crit*sqrt(n/4) - .5)
cut
n <- length(x)
pbinom(0:((n-1)/2), n, 0.5)
k <- qbinom(p=alpha / 2, size=n, prob=0.5, lower.tail=TRUE)
k
x <- rnorm(n)
n <- 10
x <- rnorm(n)
n = length(x)
est = median(x)
xs = sort(x)
crit = -qnorm(alpha/2)
cut = round((n/2) - crit*sqrt(n/4) - .5)
cut
k <- qbinom(p=alpha / 2, size=n, prob=0.5, lower.tail=TRUE)
k
sort(x)[c(k, n - k + 1)]
xs = sort(x)
crit = -qnorm(alpha/2)
cut = round((n/2) - crit*sqrt(n/4) - .5)
lci = xs[cut+1]
uci = xs[n-cut]
lci
uci
2*pbinom(cut,n,1/2)
acconf = 1 - 2*pbinom(cut,n,1/2)
acconf
## Actual CL:
1 - 2 * pbinom(k - 1, size=n, prob=0.5) >= 1 - alpha
## Actual CL:
1 - 2 * pbinom(k - 1, size=n, prob=0.5)
dpCDF(x, -4, 4, 1, 0.01)
k <- 1:15
1 - 2 * pbinom(k-1, 15, 1 / 2)
pbinom(0, 15)
pbinom(0, 15, 1/2)
1-2*pbinom(0, 15, 1/2)
?pmax
reticulate::repl_python()
lapply(0:4, function(i) 2^i)
sapply(0:4, function(i) 2^i)
reticulate::repl_python()
dpTree(x, length(x), lower_bound, upper_bound, epsilon, depth, cdp)
dpTree(x, length(x), -4, 4, 1, 5, T)
dpTree <- function(x, n, lower_bound, upper_bound, epsilon, depth, cdp){
# initialize list of number of bins at each level of tree
#bins = [2**i for i in range(1,depth)]
bins <- 2^(1:depth)
# divide up epsilon
if(cdp){
eps <- epsilon/sqrt(depth)
} else {
eps <- epsilon/depth
}
# build noisy histogram at each level of tree
#tree = [([n],(lower_bound, upper_bound))] + [dpHistogram(x, n, lower_bound, upper_bound, eps, bins[i]) for i in range(depth-1)]
tree <- append(list(list(n, c(lower_bound, upper_bound))), lapply(bins, function(b) dpHistogram(x, n, lower_bound, upper_bound, eps, b)))
return(tree)
}
depth <- 10
# initialize list of number of bins at each level of tree
#bins = [2**i for i in range(1,depth)]
bins <- 2^(1:depth)
bins
dpTree(x)
dpTree(x, length(x), -4, 4, 1, 5, T)
bins
depth <- 10
# initialize list of number of bins at each level of tree
#bins = [2**i for i in range(1,depth)]
bins <- 2^(1:depth)
append(list(list(0)), lapply(bins, function(b) rep(0, b)))
depth <- 3
onevalTree <- function(x, n, lower_bound, upper_bound, epsilon, depth, cdp){
# initialize list of number of bins at each level of tree
#bins = [2**i for i in range(1,depth)]
bins <- 2^(1:depth)
append(list(list(0)), lapply(bins, function(b) rep(0, b)))
# build noisy histogram at each level of tree
#tree = [([n],(lower_bound, upper_bound))] + [dpHistogram(x, n, lower_bound, upper_bound, eps, bins[i]) for i in range(depth-1)]
tree <- append(list(list(n, c(lower_bound, upper_bound))), lapply(bins, function(b) dpHistogram(x, n, lower_bound, upper_bound, eps, b)))
return(tree)
}
# initialize list of number of bins at each level of tree
#bins = [2**i for i in range(1,depth)]
bins <- 2^(1:depth)
append(list(list(0)), lapply(bins, function(b) rep(0, b)))
append(list(list(0)), lapply(bins, function(b) list(rep(0, b))))
zeroTree <- append(list(list(0)), lapply(bins, function(b) list(rep(0, b))))
zeroTree[[2]]
zeroTree[[2]][[1]]
zeroTree[[one_loc[1]]][[1]][one_loc[2]]
one_loc <- c(3, 3)
zeroTree[[one_loc[1]]][[1]][one_loc[2]]
zeroTree[[one_loc[1]]][[1]][one_loc[2]] <- 1
zeroTree
single_value_tree <- function(x, n, lower_bound, upper_bound, epsilon, depth, cdp){
# initialize list of number of bins at each level of tree
#bins = [2**i for i in range(1,depth)]
bins <- 2^(1:depth)
tree <- append(list(list(0)), lapply(bins, function(b) list(rep(0, b))))
tree[[one_loc[1]]][[1]][one_loc[2]] <- 1
return(tree)
}
single_value_tree <- function(depth, one_loc){
# initialize list of number of bins at each level of tree
#bins = [2**i for i in range(1,depth)]
bins <- 2^(1:depth)
tree <- append(list(list(0)), lapply(bins, function(b) list(rep(0, b))))
tree[[one_loc[1]]][[1]][one_loc[2]] <- 1
return(tree)
}
empty_tree <- function(depth){
# initialize list of number of bins at each level of tree
#bins = [2**i for i in range(1,depth)]
bins <- 2^(1:depth)
tree <- append(list(list(0)), lapply(bins, function(b) list(rep(0, b))))
return(tree)
}
empty_tree(4)
empty_tree(4)
single_value_tree(4, c(1, 1))
a <- empty_tree(4)
b <- single_value_tree(4, c(1, 1))
lapply(length(a), function(x) a[[x]][[1]]+b[[x]][[1]])
lapply(1:length(a), function(x) a[[x]][[1]]+b[[x]][[1]])
lapply(1:length(a), function(x) list(a[[x]][[1]]+b[[x]][[1]]))
a <- single_value_tree(4, c(1, 1))
b <- single_value_tree(4, c(1, 1))
lapply(1:length(a), function(x) list(a[[x]][[1]]+b[[x]][[1]]))
sum_trees <- function(tree_1, tree_2){
lapply(1:length(tree_1), function(x) list(tree_1[[x]][[1]]+tree_2[[x]][[1]]))
}
optimalPostProcess(single_value_tree(depth, c(1, 1)), 1)
optimalPostProcess(single_value_tree(depth, c(1, 1)), 1)[[1]]
optimalPostProcess(single_value_tree(depth, c(4, 1)), 1)[[1]]
optimalPostProcess(single_value_tree(depth, c(4, 1)), 2)[[1]]
optimalPostProcess(single_value_tree(depth, c(4, 1)), 3)[[1]]
optimalPostProcess(single_value_tree(depth, c(4, 1)), 1)[[1]]
reticulate::repl_python()
as.binary(2)
as.binary(2)
intToBits(2)
as.integer(intToBits(2))
as.integer(intToBits(100))
intToBits(100)
as.integer(intToBits(100))
reticulate::repl_python()
rev(as.integer(intToBits(100)))
which(rev(as.integer(intToBits(100)))==1)
min(which(rev(as.integer(intToBits(100)))==1))
rev(as.integer(intToBits(100)))
rev(as.integer(intToBits(100)))[min(which(rev(as.integer(intToBits(100)))==1)):32]
paste0(rev(as.integer(intToBits(100)))[min(which(rev(as.integer(intToBits(100)))==1)):32], collapse = "")
st <- paste0(rev(as.integer(intToBits(100)))[min(which(rev(as.integer(intToBits(100)))==1)):32], collapse = "")
stringr::str_pad(st, 25, "0")
stringr::str_pad(st, 25, pad = "0")
bin_rep <- rev(as.integer(intToBits(100)))
paste0(bin_rep[min(bin_rep==1):32], collapse = "")
paste0(bin_rep[min(bin_rep==1):32], collapse = "")
paste0(bin_rep[min(bin_rep==1):32], collapse = "")
paste0(bin_rep[min(bin_rep==1):32], collapse = "")
paste0(bin_rep[min(bin_rep==1):32], collapse = "")
paste0(bin_rep[min(bin_rep==1):32], collapse = "")
paste0(bin_rep[min(bin_rep==1):32], collapse = "")
paste0(bin_rep[min(bin_rep==1):32], collapse = "")
st <- paste0(bin_rep[min(which(bin_rep)==1)):32], collapse = "")
st <- paste0(bin_rep[min(which(bin_rep==1)):32], collapse = "")
st
stringr::str_pad(st, 25, pad = "0")
reticulate::repl_python()
index_bin_string
index <- 4
level <- 4
bin_rep <- rev(as.integer(intToBits(index)))
bin_rep
st <- paste0(bin_rep[min(which(bin_rep==1)):32], collapse = "")
st
index_bin_string <- stringr::str_pad(st, level, pad = "0")
index_bin_string
strsplit(index_bin_string, "")[[1]]
reticulate::repl_python()
as.integer(1.5)
reticulate::repl_python()
a
a[[2]][[1]]
length(a[[2]][[1]])
seq_along(length(a[[2]][[1]]))
seq_along(length(a[[2]][[1]]))
seq_along(length(a[[2]][[1]]))
?seq_along
seq(length(a[[2]][[1]]))
flip_level <- function(level, index, node_vals){
bin_rep <- rev(as.integer(intToBits(index)))
st <- paste0(bin_rep[min(which(bin_rep==1)):32], collapse = "")
index_bin_string <- stringr::str_pad(st, level, pad = "0")
start <- 0
end <- length(node_vals)
for(c in strsplit(index_bin_string, "")[[1]]){
mid <- as.integer((start + end)/2)
if(c == 1){
flipped_vals <- node_vals[(mid+1):end]
flipped_vals <- c(flipped_cals, node_vals[(start+1):mid])
for(i in seq(length(node_vals))) {
if (i > start & i < end){
node_vals[i] <- flipped_vals[i - start]
} else {
node_vals[i] <- node_vals[i]
}
}
start <- mid
} else {
end <- mid
}
}
return(node_vals)
}
optimalPostProcess(b)
optimalPostProcess(b)[[1]]
optimalPostProcess(b)[[1]][[2]][[1]]
flip_level(2, 2, optimalPostProcess(b)[[1]][[2]][[1]])
flip_level <- function(level, index, node_vals){
bin_rep <- rev(as.integer(intToBits(index)))
st <- paste0(bin_rep[min(which(bin_rep==1)):32], collapse = "")
index_bin_string <- stringr::str_pad(st, level, pad = "0")
start <- 0
end <- length(node_vals)
for(c in strsplit(index_bin_string, "")[[1]]){
mid <- as.integer((start + end)/2)
if(c == 1){
flipped_vals <- node_vals[(mid+1):end]
flipped_vals <- c(flipped_vals, node_vals[(start+1):mid])
for(i in seq(length(node_vals))) {
if (i > start & i < end){
node_vals[i] <- flipped_vals[i - start]
} else {
node_vals[i] <- node_vals[i]
}
}
start <- mid
} else {
end <- mid
}
}
return(node_vals)
}
optimalPostProcess(b)[[1]][[2]][[1]]
optimalPostProcess(b)[[1]][[3]][[1]]
optimalPostProcess(b)[[1]][[4]][[1]]
optimalPostProcess(b)[[1]][[5]][[1]]
b <- single_value_tree(4, c(2, 1))
optimalPostProcess(b)[[1]][[5]][[1]]
optimalPostProcess(b)[[1]][[2]][[1]]
flip_level(2, 2, optimalPostProcess(b)[[1]][[2]][[1]])
flip_level(2, 1, optimalPostProcess(b)[[1]][[2]][[1]])
flip_level(2, 2, optimalPostProcess(b)[[1]][[2]][[1]])
flip_level(2, 3, optimalPostProcess(b)[[1]][[2]][[1]])
flip_level(2, 2, optimalPostProcess(b)[[1]][[2]][[1]])
reticulate::repl_python()
single_value_tree(4, c(2, 1))
single_value_tree(4, c(3, 2))
b <- single_value_tree(4, c(3, 2))
flip_level(2, 2, b)
b[[2]]
b[[3]][[1]]
b[[3]][[1]]
flip_level(2, 2, b[[3]][[1]])
flip_level(2, 1, b[[3]][[1]])
flip_level <- function(level, index, node_vals){
bin_rep <- rev(as.integer(intToBits(index)))
st <- paste0(bin_rep[min(which(bin_rep==1)):32], collapse = "")
index_bin_string <- stringr::str_pad(st, level, pad = "0")
start <- 0
end <- length(node_vals)
for(c in strsplit(index_bin_string, "")[[1]]){
mid <- as.integer((start + end)/2)
if(c == 1){
flipped_vals <- node_vals[(mid+1):end]
flipped_vals <- c(flipped_vals, node_vals[(start+1):mid])
for(i in seq(length(node_vals))) {
if (i => start & i < end){
node_vals[i+1] <- flipped_vals[i+1 - start]
} else {
node_vals[i+1] <- node_vals[i+1]
}
}
start <- mid
} else {
end <- mid
}
}
return(node_vals)
}
flip_level <- function(level, index, node_vals){
bin_rep <- rev(as.integer(intToBits(index)))
st <- paste0(bin_rep[min(which(bin_rep==1)):32], collapse = "")
index_bin_string <- stringr::str_pad(st, level, pad = "0")
start <- 0
end <- length(node_vals)
for(c in strsplit(index_bin_string, "")[[1]]){
mid <- as.integer((start + end)/2)
if(c == 1){
flipped_vals <- node_vals[(mid+1):end]
flipped_vals <- c(flipped_vals, node_vals[(start+1):mid])
for(i in seq(length(node_vals))) {
if (i => start & i < end){
node_vals[i+1] <- flipped_vals[i+1 - start]
} else {
node_vals[i+1] <- node_vals[i+1]
}
}
start <- mid
} else {
end <- mid
}
}
return(node_vals)
}
flip_level <- function(level, index, node_vals){
bin_rep <- rev(as.integer(intToBits(index)))
st <- paste0(bin_rep[min(which(bin_rep==1)):32], collapse = "")
index_bin_string <- stringr::str_pad(st, level, pad = "0")
start <- 0
end <- length(node_vals)
for(c in strsplit(index_bin_string, "")[[1]]){
mid <- as.integer((start + end)/2)
if(c == 1){
flipped_vals <- node_vals[(mid+1):end]
flipped_vals <- c(flipped_vals, node_vals[(start+1):mid])
for(i in seq(length(node_vals))) {
if (i >= start & i < end){
node_vals[i+1] <- flipped_vals[i+1 - start]
} else {
node_vals[i+1] <- node_vals[i+1]
}
}
start <- mid
} else {
end <- mid
}
}
return(node_vals)
}
flip_level(2, 1, b[[3]][[1]])
flip_level <- function(level, index, node_vals){
bin_rep <- rev(as.integer(intToBits(index)))
st <- paste0(bin_rep[min(which(bin_rep==1)):32], collapse = "")
index_bin_string <- stringr::str_pad(st, level, pad = "0")
start <- 0
end <- length(node_vals)
for(c in strsplit(index_bin_string, "")[[1]]){
mid <- as.integer((start + end)/2)
if(c == 1){
flipped_vals <- node_vals[(mid+1):end]
flipped_vals <- c(flipped_vals, node_vals[(start+1):mid])
for(i in seq(length(node_vals))) {
if (i > start & i <= end){
node_vals[i] <- flipped_vals[i - start]
} else {
node_vals[i] <- node_vals[i]
}
}
start <- mid
} else {
end <- mid
}
}
return(node_vals)
}
flip_level(2, 1, b[[3]][[1]])
flip_level(2, 2, b[[3]][[1]])
flip_level(2, 1, b[[3]][[1]])
flip_level(2, 0, b[[3]][[1]])
flip_level(2, 2, b[[3]][[1]])
flip_level(2, 3, b[[3]][[1]])
flip_level(2, 4, b[[3]][[1]])
flip_level(2, 2, b[[3]][[1]])
flip_level(2, 3, b[[3]][[1]])
flip_level(2, 4, b[[3]][[1]])
flip_level(2, 5, b[[3]][[1]])
flip_level(2, 6, b[[3]][[1]])
flip_level(2, 1, b[[3]][[1]])
b[[3]][[1]]
flip_level(2, 2, b[[3]][[1]])
reticulate::repl_python()
flip_level(2, 0, b[[3]][[1]])
flip_level(2, 1, b[[3]][[1]])
flip_level(2, 2, b[[3]][[1]])
flip_level(2, 3, b[[3]][[1]])
as.integer(intToBits(index))
index <- 0
as.integer(intToBits(index))
bin_rep <- rev(as.integer(intToBits(index)))
bin_rep
paste0(bin_rep[min(which(bin_rep==1)):32], collapse = "")
any(bin_rep)==1
bin_rep
bin_rep==1
any(bin_rep==1)
sum(bin_rep)
paste0(0)
st <- paste0(0)
stringr::str_pad(st, level, pad = "0")
stringr::str_pad(st, level, pad = "0")
stringr::str_pad(st, level, pad = "0")
stringr::str_pad(st, level, pad = "0")
stringr::str_pad(st, level, pad = "0")
flip_level <- function(level, index, node_vals){
bin_rep <- rev(as.integer(intToBits(index)))
if(sum(bin_rep)>0){
st <- paste0(bin_rep[min(which(bin_rep==1)):32], collapse = "")
} else {
st <- paste0(0)
}
index_bin_string <- stringr::str_pad(st, level, pad = "0")
start <- 0
end <- length(node_vals)
for(c in strsplit(index_bin_string, "")[[1]]){
mid <- as.integer((start + end)/2)
if(c == 1){
flipped_vals <- node_vals[(mid+1):end]
flipped_vals <- c(flipped_vals, node_vals[(start+1):mid])
for(i in seq(length(node_vals))) {
if (i > start & i <= end){
node_vals[i] <- flipped_vals[i - start]
} else {
node_vals[i] <- node_vals[i]
}
}
start <- mid
} else {
end <- mid
}
}
return(node_vals)
}
flip_level(2, 0, b[[3]][[1]])
flip_level(2, 2, b[[3]][[1]])
flip_level(2, 1, b[[3]][[1]])
depth <- 4
2^(0:depth)
node_effects <- function(depth, epsilon){
# returns a list of trees that describe the effect that a node at each level of the tree effects the measurements at any other node.
# figure out how many nodes there are at each level of the tree
nodes_per_level = 2^(0:depth)
# build all the trees of 0's with single 1s
all_input_trees = list()
for(i in 1:depth){
input_trees_at_level = list()
for(j in 1:nodes_per_level[i]){
append(input_trees_at_level, single_value_tree(depth, c(i, j)))
}
append(all_input_trees, input_trees_at_level)
}
return(all_input_trees)
}
node_effects(4, 1)
node_effects <- function(depth, epsilon){
# returns a list of trees that describe the effect that a node at each level of the tree effects the measurements at any other node.
# figure out how many nodes there are at each level of the tree
nodes_per_level = 2^(0:depth)
# build all the trees of 0's with single 1s
all_input_trees = list()
for(i in 1:depth){
input_trees_at_level = list()
for(j in 1:nodes_per_level[i]){
input_trees_at_level <- append(input_trees_at_level, single_value_tree(depth, c(i, j)))
}
all_input_trees <- append(all_input_trees, input_trees_at_level)
}
return(all_input_trees)
}
node_effects(4, 1)
all_input_trees
all_input_trees
depth <- 4
# returns a list of trees that describe the effect that a node at each level of the tree effects the measurements at any other node.
# figure out how many nodes there are at each level of the tree
nodes_per_level = 2^(0:depth)
# build all the trees of 0's with single 1s
all_input_trees = list()
for(i in 1:depth){
input_trees_at_level = list()
for(j in 1:nodes_per_level[i]){
input_trees_at_level <- append(input_trees_at_level, single_value_tree(depth, c(i, j)))
}
all_input_trees <- append(all_input_trees, input_trees_at_level)
}
all_input_trees
# returns a list of trees that describe the effect that a node at each level of the tree effects the measurements at any other node.
# figure out how many nodes there are at each level of the tree
nodes_per_level = 2^(0:depth)
# build all the trees of 0's with single 1s
all_input_trees = list()
for(i in 1:depth){
input_trees_at_level = list()
for(j in 1:nodes_per_level[i]){
input_trees_at_level <- append(input_trees_at_level, single_value_tree(depth, c(i, j)))
}
all_input_trees <- append(all_input_trees, list(input_trees_at_level))
}
all_input_trees
reticulate::repl_python()
